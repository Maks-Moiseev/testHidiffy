import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import requests
import json
from datetime import datetime

# ------------------- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø -------------------
BOT_TOKEN = "8075652827:AAEgPlTxnGrO4NcZ2KXBSWSxe_t3uccJtq4"
API_URL = "https://45.82.15.213.sslip.io/MY32Nj607jUvh2m03VgBftn/api/v2/admin/user/"
API_KEY = "9aac422d-6819-4412-9fa7-a439ce308ca8"
SSL_VERIFY = True  # –û—Ç–∫–ª—é—á–∏—Ç—å –¥–ª—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
# ----------------------------------------------------

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

async def create_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if update.message.from_user.id != 1102014206:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID
            await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
            return

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = {
  "added_by_uuid": None,
  "comment": "fdghgh",
  "current_usage_GB": 0,
  "ed25519_private_key": "string",
  "ed25519_public_key": "string",
  "enable": True,
  "is_active": True,
  "lang": "ru",
  "last_online": None,
  "last_reset_time": None,
  "mode": "no_reset",
  "name": "string",
  "package_days": 10,
  "start_date": "2025-05-24",
  "telegram_id": 134250,
  "usage_limit_GB": 10,
  "uuid": None,
  "wg_pk": "string",
  "wg_psk": "string",
  "wg_pub": "string"
}

        headers = {
            "Accept": "application/json",
            "Content-Type": "application/json",
            "Hiddify-API-Key": API_KEY
        }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
        if not await check_api_health(headers):
            await update.message.reply_text("üî¥ API Hiddify –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        response = requests.post(
            API_URL,
            headers=headers,
            json=user_data,
            verify=SSL_VERIFY,
            timeout=15
        )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
        if response.status_code == 200:
            result = response.json()
            await update.message.reply_text(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
                f"üë§ –ò–º—è: {result.get('name', 'N/A')}\n"
                f"üìä –õ–∏–º–∏—Ç: {result.get('usage_limit_GB', 0)} GB\n"
                f"üìÖ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {result.get('expire_date', 'N/A')}\n"
                f"–í–∞—à –∫–ª—é—á: https://45.82.15.213.sslip.io/7uflOTGssTTc/{result.get('uuid', 'N/A')}/?home=true"
            )
        else:
            logger.error(f"API Error: {response.status_code} - {response.text}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ API ({response.status_code})\n"
                f"{response.json().get('detail', 'Unknown error')}"
            )

    except Exception as e:
        logger.exception("Critical error in create_user:")
        await update.message.reply_text("üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")

def generate_wg_psk():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è WireGuard PSK –∫–ª—é—á–∞"""
    try:
        return os.urandom(32).hex()  # –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    except Exception as e:
        logger.warning(f"WG PSK generation failed: {str(e)}")
        return "default_psk_key"

async def check_api_health(headers):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    try:
        test_url = API_URL.rsplit('/', 5)[0] + "/"
        response = requests.get(test_url, headers=headers, verify=SSL_VERIFY, timeout=100)
        return response.status_code == 200
    except Exception as e:
        logger.error(f"API Health Check Failed: {str(e)}")
        return False

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    application = Application.builder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("create_user", create_user))

    # –ó–∞–ø—É—Å–∫
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()